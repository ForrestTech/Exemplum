@page "/weatherforecast"
@using Exemplum.WebApp.Features.WeatherForecasts.Client
@using Exemplum.WebApp.Location

@inject IWeatherForecastClient Client
@inject ILocationService LocationService

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="weather-forecast">
            <MudText Typo="Typo.h1">Weather forecast</MudText>
            <MudText Typo="Typo.body1">This component demonstrates fetching data from a service and the use of the browser geolocation API.</MudText>
            <br/>
            <br/>
            <MudTable Items="@forecasts" Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="@loading"
                      LoadingProgressColor="Color.Info">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Forecasts</MudText>
                    <MudSpacer/>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Location</MudTh>
                    <MudTh>Temp. (C)</MudTh>
                    <MudTh>Summary</MudTh>
                    <MudTh>Description</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Temp">@context.Main.Temp</MudTd>
                    <MudTd DataLabel="Summary">@context.Weather.First().Main</MudTd>
                    <MudTd DataLabel="Description">@context.Weather.First().Description</MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </MudContainer>
</MudMainContent>


@code {

    List<WeatherForecast>? forecasts;
    WeatherForecast? forecast;
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        var geolocation = await LocationService.GetCurrentLocation() ?? new GeoLocation
        {
            Lat = 51.5d,
            Lon = 0.12d
        };

        forecast = await Client.GetForecast(geolocation.Lat, geolocation.Lon);
        forecasts = new List<WeatherForecast> { forecast };
        loading = false;
    }
}