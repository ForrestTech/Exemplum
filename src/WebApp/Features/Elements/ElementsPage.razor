@page "/elements"

@inject HttpClient httpClient
@using System.Net.Http.Json

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudDataGrid T="Element"
                     MultiSelection="true"
                     Items="@Elements"
                     SortMode="SortMode.Multiple"
                     Filterable="true"
                     FilterMode="DataGridFilterMode.Simple"
                     QuickFilter="@_quickFilter"
                     Hideable="true"
                     RowClick="@RowClicked"
                     SelectedItemsChanged="@SelectedItemsChanged"
        >
            <ToolBarContent>
                <MudText Typo="Typo.h6">Elements</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="Element" />
                <Column T="Element" Field="Number" Title="Nr" Sortable="false" Filterable="false" />
                <Column T="Element" Field="Small" Title="Sign" Filterable="false" />
                <Column T="Element" Field="Name" SortBy="@_sortBy" Filterable="false" />
                <Column T="Element" Field="Position" Filterable="false" />
                <Column T="Element" Field="Molar" Title="Molar mass" Filterable="false" />
                <Column T="Element" Field="Group" Title="Category" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Element" />
            </PagerContent>
        </MudDataGrid>
        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
        </div>
        <MudExpansionPanels Style="flex:1">
            <MudExpansionPanel Text="Show Events">
                @foreach (var message in _events)
                {
                    <MudText Typo="@Typo.body2">@message</MudText>
                }
                @if (_events.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudContainer>
</MudMainContent>


@code {

    private IEnumerable<Element> Elements = new List<Element>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private Func<Element, object> _sortBy => x =>
      {
          if (_sortNameByLength)
              return x.Name.Length;
          else
              return x.Name;
      };
    
    private Func<Element, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Small.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>("https://localhost:5001/api/elements");
    }

    void RowClicked(DataGridRowClickEventArgs<Element> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Element> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    public record Element
    {
        public string Group { get; set; }
        public int Position { get; set; }
        public string Name { get; set; }
        public int Number { get; set; }
        public string Small { get; set; }
        public double Molar { get; set; }
    }
}