@page "/todolists"
@using Exemplum.WebApp.Extensions
@using System.ComponentModel.DataAnnotations

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="todo-lists">
            <MudText Typo="Typo.h1">Todo Lists</MudText>
            <EditForm Model="@newTodoList" OnValidSubmit="@AddNewList">
                <DataAnnotationsValidator/>
                <MudGrid>
                    <MudItem xs="7">
                        <MudTextField Label="New list name"
                                      @bind-Value="@newTodoList.Title"
                                      For="@(() => newTodoList.Title)"
                                      Immediate="true"
                                      RequiredError="List name is required!"/>
                    </MudItem>
                    <MudItem xs="2">
                        <MudColorPicker Label="" @bind-Text="newTodoList.Colour"
                                        PickerVariant="PickerVariant.Inline"
                                        ColorPickerMode="ColorPickerMode.HEX"
                                        DisableAlpha="true"
                                        DisableInputs="true" DisableModeSwitch="true"
                                        AllowKeyboardInput="false"
                                        Style="@($"color: {newTodoList.Colour};")"/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudButton @onclick="AddNewList"
                                   Disabled="@(!CanAdd())"
                                   Class="ml-auto add-button"
                                   ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary">
                            Add
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
            <MudGrid>
                <MudItem xs="12">
                    @foreach (var list in todoLists)
                    {
                        <MudPaper Elevation="2" Class="todo-lists-paper">
                            @if (list.InEditMode)
                            {
                                <MudTextField @bind-Value="@list.Title"
                                              Immediate="true"
                                              @onkeypress="(args) => {if (args.IsEnter()) Enter(list.Id);}"/>
                                <span class="todo-lists-icons">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                       @onclick="() => SaveList(list.Id)"/>
                                    </MudTooltip>
                                </span>
                            }
                            else
                            {
                                <span style="color:@list.Colour">@list.Title</span>
                                <span class="todo-lists-icons">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Create"
                                                       @onclick="() => EditList(list.Id)"/>
                                    </MudTooltip>
                                    <MudTooltip Text="View Todos">
                                        <MudIconButton Icon="@Icons.Material.Outlined.List"
                                                       @onclick="() => ViewList(list.Id)"/>
                                    </MudTooltip>
                                    <MudTooltip Text="Delete List">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                       @onclick="() => DeleteList(list.Id)"/>
                                    </MudTooltip>
                                </span>
                            }
                        </MudPaper>
                    }
                </MudItem>
            </MudGrid>
        </div>
    </MudContainer>
</MudMainContent>


@code{

    [Inject]
    public ITodoClient Client { get; set; } = default!;

    [Inject]
    public NavigationManager NavManager { get; set; } = default!;

    [Inject]
    IDialogService DialogService { get; set; } = default!;

    [Inject]
    ISnackbar Snackbar { get; set; } = default!;

    string colourValue = string.Empty;
    NewTodoList newTodoList = new();
    List<TodoList> todoLists = new List<TodoList>();

    protected override async Task OnInitializedAsync()
    {
        var todoPage = await Client.GetTodoLists(1, 100);

        todoLists = todoPage.Items;
    }

    void AddNewList()
    {
        todoLists.Add(new TodoList
        {
            Id = todoLists.Max(x => x.Id) + 1,
            Title = newTodoList.Title,
            Colour = newTodoList.Colour
        });
        newTodoList = new NewTodoList();
    }

    bool CanAdd() => newTodoList.Title.HasValue() && newTodoList.Title.Length > 2;

    void Enter(int listId) => SaveList(listId);
    
    void SaveList(int id) => todoLists.Single(x => x.Id == id).InEditMode = false;

    void EditList(int id) => todoLists.Single(x => x.Id == id).InEditMode = true;

    void ViewList(int id) => NavManager.NavigateTo($"todolist/{id}/{ListTitle(id).ToLower()}");
    
    string ListTitle(int id) => todoLists.Single(x => x.Id == id).Title;

    async Task DeleteList(int id)
    {
        var listTitle = ListTitle(id);
        var dialogText = $"Do you really want to delete the list {listTitle}? This process cannot be undone.";
        var result = await ConfirmationDialog.ShowDeleteDialog(DialogService, dialogText);

        if (!result.Cancelled)
        {
            Snackbar.Add($"List {listTitle} deleted", Severity.Error);
            todoLists.RemoveAll(x => x.Id == id);
        }       
    }

    private class NewTodoList
    {
        [Required]
        [StringLength(300, MinimumLength = 3)]
        public string Title { get; set; } = string.Empty;

        public string Colour { get; set; } = string.Empty;
    }
}