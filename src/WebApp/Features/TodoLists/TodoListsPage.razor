@page "/todolists"
@using Exemplum.WebApp.Features.TodoLists.Client

@attribute [Authorize(Policy = "TodoWriteAccess")]

@inject ITodoClient Client;
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject  IJSRuntime JsRuntime

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Large">
        <div class="todo-lists">
            <MudText Typo="Typo.h1">Todo Lists</MudText>
            <AddTodoListForm OnAddNewList="AddNewList"/>
            <MudGrid>
                <MudItem xs="12">
                    @foreach (var list in todoLists)
                    {
                        <MudPaper Elevation="2" Class="todo-lists-paper">
                            @if (list.InEditMode)
                            {
                                <MudTextField @bind-Value="@list.Title"
                                              Immediate="true"
                                              UserAttributes="@TodoListAttributes(list.Id)"
                                              @onkeypress="(args) => Enter(list.Id, args)"/>
                                <span class="todo-lists-icons">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                       @onclick="() => SaveList(list.Id)"/>
                                    </MudTooltip>
                                </span>
                            }
                            else
                            {
                                <span style="color:@list.Colour">@list.Title</span>
                                <span class="todo-lists-icons">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Create"
                                                       @onclick="() => EditList(list.Id)"/>
                                    </MudTooltip>
                                    <MudTooltip Text="View Todos">
                                        <MudIconButton Icon="@Icons.Material.Outlined.List"
                                                       @onclick="() => ViewList(list.Id)"/>
                                    </MudTooltip>
                                    <AuthorizeView Policy="TodoDeleteAccess">
                                        <MudTooltip Text="Delete List">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                           @onclick="() => DeleteList(list.Id)"/>
                                        </MudTooltip>
                                    </AuthorizeView>
                                </span>
                            }
                        </MudPaper>
                    }
                </MudItem>
            </MudGrid>
        </div>
    </MudContainer>
</MudMainContent>


@code{

    List<TodoList> todoLists = new List<TodoList>();

    protected override async Task OnInitializedAsync()
    {
        var todoPage = await Client.GetTodoLists(1, 100);

        todoLists = todoPage.Items;
    }

    async Task AddNewList(AddTodoListForm.NewTodoList newTodoList)
    {
        var todoItem = await Client.CreateTodoList(new CreateTodoList(newTodoList.Title, newTodoList.Colour));
        todoLists.Add(todoItem);
    }

    async Task Enter(int listId, KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.IsEnter())
        {
            await SaveList(listId);
        }
    }

    async Task EditList(int id)
    {
        todoLists.Single(x => x.Id == id).InEditMode = true;

    // Set focus to the now visible edit input box. This is only possible with JS currently.
        await JsRuntime.RetryInvokeAsync("setFocusById", TodoListId(id));
    }

    void ViewList(int id) => NavManager.NavigateTo($"todolist/{id}/{ListTitle(id).ToLower()}");

    async Task SaveList(int id)
    {
        var todoList = todoLists.Single(x => x.Id == id);
        await Client.UpdateTodoList(id, new UpdateTodoList(todoList.Title, todoList.Colour));
        todoLists.Single(x => x.Id == id).InEditMode = false;
    }

    string ListTitle(int id) => todoLists.Single(x => x.Id == id).Title;

    async Task DeleteList(int id)
    {
        var listTitle = ListTitle(id);
        var dialogText = $"Do you really want to delete the list {listTitle}? This process cannot be undone.";
        var result = await ConfirmationDialog.ShowDeleteDialog(DialogService, dialogText);

        if (!result.Cancelled)
        {
            Snackbar.Add($"List {listTitle} deleted", Severity.Error);
            await Client.DeleteTodoList(id);
            todoLists.RemoveAll(x => x.Id == id);
        }
    }

    static string TodoListId(int id) => $"todo-list-text-{id}";
    static Dictionary<string, object> TodoListAttributes(int id) => new Dictionary<string, object> { { "id", TodoListId(id) } };

}